//TetrisDX ver2.0.cpp기준. 테트리스 객체 만들기
#pragma once
#include <stdlib.h>   //srand() 설정에서 getpid()
#include <time.h>     //time_t tick = clock(); 및 srand() 설정에서 time(NULL);


//gridTemplate [tetrisType] [tetrisRotation] [y] [x]
static const int gridTemplate[15][4][4][4] = {
	//1단계 테트리미노
	{ { { 0,0,0,0 },{ 1,1,1,1 },{ 0,0,0,0 },{ 0,0,0,0 } }, // 0   'ㅡ' 
	{ { 0,0,1,0 },{ 0,0,1,0 },{ 0,0,1,0 },{ 0,0,1,0 } },
	{ { 0,0,0,0 },{ 0,0,0,0 },{ 1,1,1,1 },{ 0,0,0,0 } },
	{ { 0,1,0,0 },{ 0,1,0,0 },{ 0,1,0,0 },{ 0,1,0,0 } } },
	{ { { 2,0,0,0 },{ 2,2,2,0 },{ 0,0,0,0 },{ 0,0,0,0 } }, // 1   'ㄴ' 
	{ { 0,2,2,0 },{ 0,2,0,0 },{ 0,2,0,0 },{ 0,0,0,0 } },
	{ { 0,0,0,0 },{ 2,2,2,0 },{ 0,0,2,0 },{ 0,0,0,0 } },
	{ { 0,2,0,0 },{ 0,2,0,0 },{ 2,2,0,0 },{ 0,0,0,0 } } },
	{ { { 0,0,3,0 },{ 3,3,3,0 },{ 0,0,0,0 },{ 0,0,0,0 } }, // 2   'ㄱ'반대 
	{ { 0,3,0,0 },{ 0,3,0,0 },{ 0,3,3,0 },{ 0,0,0,0 } },
	{ { 0,0,0,0 },{ 3,3,3,0 },{ 3,0,0,0 },{ 0,0,0,0 } },
	{ { 3,3,0,0 },{ 0,3,0,0 },{ 0,3,0,0 },{ 0,0,0,0 } } },
	{ { { 0,4,4,0 },{ 0,4,4,0 },{ 0,0,0,0 },{ 0,0,0,0 } }, // 3   'ㅁ'
	{ { 0,4,4,0 },{ 0,4,4,0 },{ 0,0,0,0 },{ 0,0,0,0 } },
	{ { 0,4,4,0 },{ 0,4,4,0 },{ 0,0,0,0 },{ 0,0,0,0 } },
	{ { 0,4,4,0 },{ 0,4,4,0 },{ 0,0,0,0 },{ 0,0,0,0 } } },
	{ { { 0,5,5,0 },{ 5,5,0,0 },{ 0,0,0,0 },{ 0,0,0,0 } }, // 4   'ㄹ'반대 
	{ { 0,5,0,0 },{ 0,5,5,0 },{ 0,0,5,0 },{ 0,0,0,0 } },
	{ { 0,0,0,0 },{ 0,5,5,0 },{ 5,5,0,0 },{ 0,0,0,0 } },
	{ { 5,0,0,0 },{ 5,5,0,0 },{ 0,5,0,0 },{ 0,0,0,0 } } },
	{ { { 0,6,0,0 },{ 6,6,6,0 },{ 0,0,0,0 },{ 0,0,0,0 } }, // 5   '┴' 
	{ { 0,6,0,0 },{ 0,6,6,0 },{ 0,6,0,0 },{ 0,0,0,0 } },
	{ { 0,0,0,0 },{ 6,6,6,0 },{ 0,6,0,0 },{ 0,0,0,0 } },
	{ { 0,6,0,0 },{ 6,6,0,0 },{ 0,6,0,0 },{ 0,0,0,0 } } },
	{ { { 7,7,0,0 },{ 0,7,7,0 },{ 0,0,0,0 },{ 0,0,0,0 } }, // 6   'ㄹ'
	{ { 0,0,7,0 },{ 0,7,7,0 },{ 0,7,0,0 },{ 0,0,0,0 } },
	{ { 0,0,0,0 },{ 7,7,0,0 },{ 0,7,7,0 },{ 0,0,0,0 } },
	{ { 0,7,0,0 },{ 7,7,0,0 },{ 7,0,0,0 },{ 0,0,0,0 } } },
	//2단계 테트리미노
	{ { { 8,8,8,0 },{ 0,0,8,0 },{ 0,0,8,0 },{ 0,0,0,0 } }, // 7  : '┐'
	{ { 0,0,8,0 },{ 0,0,8,0 },{ 8,8,8,0 },{ 0,0,0,0 } },
	{ { 8,0,0,0 },{ 8,0,0,0 },{ 8,8,8,0 },{ 0,0,0,0 } },
	{ { 8,8,8,0 },{ 8,0,0,0 },{ 8,0,0,0 },{ 0,0,0,0 } } },
	{ { { 9,9,9,0 },{ 0,9,0,0 },{ 0,9,0,0 },{ 0,0,0,0 } }, // 8  : 'T'
	{ { 0,0,9,0 },{ 9,9,9,0 },{ 0,0,9,0 },{ 0,0,0,0 } },
	{ { 0,9,0,0 },{ 0,9,0,0 },{ 9,9,9,0 },{ 0,0,0,0 } },
	{ { 9,0,0,0 },{ 9,9,9,0 },{ 9,0,0,0 },{ 0,0,0,0 } } },
	{ { { 0,10,0,0 },{ 10,10,10,0 },{ 0,10,0,0 },{ 0,0,0,0 } }, // 9  : '┼'
	{ { 0,10,0,0 },{ 10,10,10,0 },{ 0,10,0,0 },{ 0,0,0,0 } },
	{ { 0,10,0,0 },{ 10,10,10,0 },{ 0,10,0,0 },{ 0,0,0,0 } },
	{ { 0,10,0,0 },{ 10,10,10,0 },{ 0,10,0,0 },{ 0,0,0,0 } } },
	{ { { 0,11,0,0 },{ 0,11,11,0 },{ 0,11,11,0 },{ 0,0,0,0 } }, // 10 :  'b'에서 수평으로 대칭
	{ { 0,0,0,0 },{ 11,11,11,0 },{ 11,11,0,0 },{ 0,0,0,0 } },
	{ { 11,11,0,0 },{ 11,11,0,0 },{ 0,11,0,0 },{ 0,0,0,0 } },
	{ { 0,11,11,0 },{ 11,11,11,0 },{ 0,0,0,0 },{ 0,0,0,0 } } },
	{ { { 12,12,12,0 },{ 12,0,12,0 },{ 12,0,12,0 },{ 0,0,0,0 } }, // 11 :  '┌┐'
	{ { 12,12,12,0 },{ 0,0,12,0 },{ 12,12,12,0 },{ 0,0,0,0 } },
	{ { 12,0,12,0 },{ 12,0,12,0 },{ 12,12,12,0 },{ 0,0,0,0 } },
	{ { 12,12,12,0 },{ 12,0,0,0 },{ 12,12,12,0 },{ 0,0,0,0 } } },
	{ { { 0,0,0,0 },{ 0,13,0,0 },{ 0,0,13,0 },{ 0,0,0,0 } }, // 12 : '-_'
	{ { 0,0,0,0 },{ 0,13,0,0 },{ 13,0,0,0 },{ 0,0,0,0 } },
	{ { 13,0,0,0 },{ 0,13,0,0 },{ 0,0,0,0 },{ 0,0,0,0 } },
	{ { 0,0,13,0 },{ 0,13,0,0 },{ 0,0,0,0 },{ 0,0,0,0 } } },
	{ { { 14,14,14,0 },{ 14,0,14,0 },{ 14,14,14,0 },{ 0,0,0,0 } }, // 13 : 폭탄
	{ { 14,14,14,0 },{ 14,0,14,0 },{ 14,14,14,0 },{ 0,0,0,0 } },
	{ { 14,14,14,0 },{ 14,0,14,0 },{ 14,14,14,0 },{ 0,0,0,0 } },
	{ { 14,14,14,0 },{ 14,0,14,0 },{ 14,14,14,0 },{ 0,0,0,0 } } },
	{ { { 0,0,0,0 },{ 0,0,0,0 },{ 0,0,0,0 },{ 0,0,0,0 } }, // 14 : clear 
	{ { 0,0,0,0 },{ 0,0,0,0 },{ 0,0,0,0 },{ 0,0,0,0 } },
	{ { 0,0,0,0 },{ 0,0,0,0 },{ 0,0,0,0 },{ 0,0,0,0 } },
	{ { 0,0,0,0 },{ 0,0,0,0 },{ 0,0,0,0 },{ 0,0,0,0 } } }
};

//테트리미노 - tetriminos
class Tetrimino
{
private:
	//테트리스 떨어지는 기둥의
	int grid[4][4][4];//테트리미노 - tetriminos
	int type;    //유형(종류)
	int size;    //크기
	int color;   //색깔
	int rotation;//회전상태
	int posX;    //가로 위치(좌표)
	int posY;    //세로 위치(좌표)

				 //상태값
	bool tetrisLocked;  // 테트리스 락
	bool tetrisDownStep;// 테트리스 밑으로 내려오는중
	bool tetrisDrop;    // 테트리스 밑으로

public:
	//테트리스 생성자
	Tetrimino(int level)
	{
		//srand( (unsigned)time(NULL)+(unsigned)getpid());
		//테트리미노 유형을 정한다.
		//모든 블록을 파괴하는 폭탄 아이템이 1% 확률로 등장
		if (rand() % 100<1) {//0~99의 값중 1%의 확률로 0이 나온다면
			this->type = 13;//13번 블록(폭탄)을 생성한다.
		}
		else if (level == 1) {//레벨이 1이면,
			this->type = rand() % 7;//0~6번 블록을 생성한다.
		}
		else if (level == 2) {             //레벨이 2면,
			this->type = rand() % 13;//0~12번 블록을 생성한다.
		}
		else {
			this->type = 0;
		}
		//테트리미노 크기를 정한다.
		if (this->type == 0 || this->type == 3) {
			this->size = 4;
		}
		else {
			this->size = 3;
		}
		//테트리미노 색깔을 정한다.
		do {
			this->color = rand() % 15 + 1;//7(GRAY)을 제외한 1~15의 수
		} while (this->color == 7);
		//테트리미노 회전상태 및 현재 좌표를 정한다.
		this->rotation = 0;
		this->posY = 0;
		this->posX = 5 - (this->size - 1);

		int i, j, k;
		//테트리미노를 정한다.
		for (i = 0; i<4; i++) {
			for (j = 0; j<4; j++) {
				for (k = 0; k<4; k++) {
					if (gridTemplate[type][i][j][k] != 0) {
						grid[i][j][k] = color;
					}
					else {
						grid[i][j][k] = 0;
					}
				}
			}
		}

		//기타 상태값을 정한다.
		this->tetrisLocked = false;
		this->tetrisDownStep = false;
		this->tetrisDrop = false;
	}

	void reSeting()
	{
		//테트리미노 크기를 정한다.
		if (this->type == 0 || this->type == 3) {
			this->size = 4;
		}
		else {
			this->size = 3;
		}
		//테트리미노 회전상태 및 현재 좌표를 정한다.
		this->rotation = 0;
		this->posY = 0;
		this->posX = 5 - (this->size - 1);
	}

	int getType() {
		return this->type;
	}
	void setType(int type) {
		this->type = type;

		int i, j, k;
		//테트리미노의 형태도 바꾼다.
		for (i = 0; i<4; i++) {
			for (j = 0; j<4; j++) {
				for (k = 0; k<4; k++) {
					if (gridTemplate[type][i][j][k] != 0) {
						grid[i][j][k] = color;
					}
					else {
						grid[i][j][k] = 0;
					}
				}
			}
		}
	}
	int getSize() {
		return this->size;
	}
	int getColor() {
		return this->color;
	}
	int getRotation() {
		return this->rotation;
	}
	void setRotation(int rotation) {
		this->rotation = rotation;
	}

	void setPosX(int posX) {
		this->posX = posX;
	}
	void setPosY(int posY) {
		this->posY = posY;
	}
	int getPosX() {
		return this->posX;
	}
	int getPosY() {
		return this->posY;
	}
	void moveLeft() {
		this->posX--;
	}
	void moveRight() {
		this->posX++;
	}
	void moveDown() {
		this->posY++;
	}

	void turnLeft() {
		this->rotation--;
		if (this->rotation == -1)
		{
			this->rotation = 3;
		}
	}
	void turnRight() {
		this->rotation++;
		if (this->rotation == 4)
		{
			this->rotation = 0;
		}
	}


	bool isLocked()
	{
		return this->tetrisLocked;
	}
	bool isDownStep()
	{
		return this->tetrisDownStep;
	}
	bool isDrop()
	{
		return this->tetrisDrop;
	}
	void setIsLocked(bool flag)
	{
		this->tetrisLocked = flag;
	}
	void setIsDownStep(bool flag)
	{
		this->tetrisDownStep = flag;
	}
	void setIsDrop(bool flag)
	{
		this->tetrisDrop = flag;
	}

	int getGrid(int x, int y)
	{
		return grid[this->rotation][x][y];
	}
	void gridClear()
	{
		int i, j, k;
		for (i = 0; i<4; i++) {
			for (j = 0; j<4; j++) {
				for (k = 0; k<4; k++) {
					grid[i][j][k] = 0;
				}
			}
		}
	}
};
